/* tslint:disable */
/* eslint-disable */
/**
 * PN registry API
 * Evidence and tracking system of sick-leave (PN) records for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xbojko@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * Unique identifier of PN record.
     * @type {string}
     * @memberof Record
     */
    'id': string;
    /**
     * Unique identifier of the patient - in slovakia its rodné číslo
     * @type {string}
     * @memberof Record
     */
    'patientId': string;
    /**
     * Full name of pacient whom the PN record was issued. When creating or updating a PN record, this field is not required if patient (patient ID) already has existing PN records from which the fullname will be inherited. Other wise it needs to be specified. When you provide the Full Name there is a contrain that it needs to match full name of other patient\'s (patiend ID) Pn records to avoid conflicting names. This is not the case if you update the full name of the only record the patient has.
     * @type {string}
     * @memberof Record
     */
    'fullName'?: string;
    /**
     * Pacient\'s employer linked to the issued PN record.
     * @type {string}
     * @memberof Record
     */
    'employer': string;
    /**
     * Reason/couse why the PN was issued for the pacient. From the official ePN in Slovakia it can have only six possible string values. This values are validated.
     * @type {string}
     * @memberof Record
     */
    'reason': RecordReasonEnum;
    /**
     * Date when the PN record was created (issued). It need to have format dd-mm-yyyy in range between 0001-01-02 and 9999-12-31. This format and range are validated.
     * @type {string}
     * @memberof Record
     */
    'issued': string;
    /**
     * Date since the issued PN record is valid. On this date validity of record start. It need to have format dd-mm-yyyy in range between 0001-01-02 and 9999-12-31. If patient already have some existing PN records this date needs to be at least day after \'valid until\' date of patient\'s latest record in terms of validity. Eg. existing latest record in terms of validity (Valid Until) ends on 10/02 so new PN record validity need to start at least on 11/02. Other constrain is that this field cannot be updated if its not the latest record in terms of validity for such patient ID. This constrains, range and format of this date are validated.
     * @type {string}
     * @memberof Record
     */
    'validFrom': string;
    /**
     * Date when the issued PN record validity ends (expires). On this date validity of record ends. It need to have format dd-mm-yyyy in range between 0001-01-02 and 9999-12-31. PN record can be issued for at least 1 day so this date need to be on \'Valid from\' day or later. This field cannot be updated if its not the latest record in terms of validity for such patient ID. This constrains are validated along with format and range.
     * @type {string}
     * @memberof Record
     */
    'validUntil': string;
    /**
     * Date when the check up associated with PN record is planned. It need to have format dd-mm-yyyy in range between 0001-01-02 and 9999-12-31. Checkup date need to be on day of \'Valid from\' or later. This is validated with format and range. Omit this field if you dont want to specify it.
     * @type {string}
     * @memberof Record
     */
    'checkUp'?: string;
    /**
     * If the check up associated with PN record was done. If this field is not provided then it created as \'false\' at default.
     * @type {boolean}
     * @memberof Record
     */
    'checkUpDone'?: boolean;
}

export const RecordReasonEnum = {
    Choroba: 'choroba',
    Uraz: 'uraz',
    ChorobaZPovolania: 'choroba z povolania',
    KarantenneOpatrenieIzolacia: 'karantenne opatrenie/izolacia',
    PracovnyUraz: 'pracovny uraz',
    Ine: 'ine'
} as const;

export type RecordReasonEnum = typeof RecordReasonEnum[keyof typeof RecordReasonEnum];


/**
 * PnRegistryRecordsApi - axios parameter creator
 * @export
 */
export const PnRegistryRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store newly issued PN record of pacient into list of all PN records in the system.
         * @summary Saves new PN record into list of all PN records
         * @param {Record} record New PN record to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: async (record: Record, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'record' is not null or undefined
            assertParamExists('createRecord', 'record', record)
            const localVarPath = `/records/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(record, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specific PN record (based on record ID) from list of all PN records in the system.
         * @summary Deletes specific PN record
         * @param {string} recordId pass the ID of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord: async (recordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('deleteRecord', 'recordId', recordId)
            const localVarPath = `/records/{recordId}/`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Based on provided record ID you can get details of particular PN record.
         * @summary Provides details about specific PN record
         * @param {string} recordId Pass the id of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (recordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('getRecord', 'recordId', recordId)
            const localVarPath = `/records/{recordId}/`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all PN records stored in the system
         * @summary Provides list of all PN records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/records/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of specific PN record.
         * @summary Updates fields of specific PN record
         * @param {string} recordId Pass the ID of the particular PN record
         * @param {Record} record Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: async (recordId: string, record: Record, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('updateRecord', 'recordId', recordId)
            // verify required parameter 'record' is not null or undefined
            assertParamExists('updateRecord', 'record', record)
            const localVarPath = `/records/{recordId}/`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(record, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PnRegistryRecordsApi - functional programming interface
 * @export
 */
export const PnRegistryRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PnRegistryRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store newly issued PN record of pacient into list of all PN records in the system.
         * @summary Saves new PN record into list of all PN records
         * @param {Record} record New PN record to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecord(record: Record, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecord(record, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specific PN record (based on record ID) from list of all PN records in the system.
         * @summary Deletes specific PN record
         * @param {string} recordId pass the ID of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecord(recordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecord(recordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Based on provided record ID you can get details of particular PN record.
         * @summary Provides details about specific PN record
         * @param {string} recordId Pass the id of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(recordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(recordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all PN records stored in the system
         * @summary Provides list of all PN records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Record>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of specific PN record.
         * @summary Updates fields of specific PN record
         * @param {string} recordId Pass the ID of the particular PN record
         * @param {Record} record Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord(recordId: string, record: Record, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord(recordId, record, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PnRegistryRecordsApi - factory interface
 * @export
 */
export const PnRegistryRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PnRegistryRecordsApiFp(configuration)
    return {
        /**
         * Use this method to store newly issued PN record of pacient into list of all PN records in the system.
         * @summary Saves new PN record into list of all PN records
         * @param {Record} record New PN record to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(record: Record, options?: any): AxiosPromise<Record> {
            return localVarFp.createRecord(record, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specific PN record (based on record ID) from list of all PN records in the system.
         * @summary Deletes specific PN record
         * @param {string} recordId pass the ID of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(recordId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecord(recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * Based on provided record ID you can get details of particular PN record.
         * @summary Provides details about specific PN record
         * @param {string} recordId Pass the id of the particular PN record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(recordId: string, options?: any): AxiosPromise<Record> {
            return localVarFp.getRecord(recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all PN records stored in the system
         * @summary Provides list of all PN records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordAll(options?: any): AxiosPromise<Array<Record>> {
            return localVarFp.getRecordAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of specific PN record.
         * @summary Updates fields of specific PN record
         * @param {string} recordId Pass the ID of the particular PN record
         * @param {Record} record Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(recordId: string, record: Record, options?: any): AxiosPromise<Record> {
            return localVarFp.updateRecord(recordId, record, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PnRegistryRecordsApi - interface
 * @export
 * @interface PnRegistryRecordsApi
 */
export interface PnRegistryRecordsApiInterface {
    /**
     * Use this method to store newly issued PN record of pacient into list of all PN records in the system.
     * @summary Saves new PN record into list of all PN records
     * @param {Record} record New PN record to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApiInterface
     */
    createRecord(record: Record, options?: AxiosRequestConfig): AxiosPromise<Record>;

    /**
     * Deletes the specific PN record (based on record ID) from list of all PN records in the system.
     * @summary Deletes specific PN record
     * @param {string} recordId pass the ID of the particular PN record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApiInterface
     */
    deleteRecord(recordId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Based on provided record ID you can get details of particular PN record.
     * @summary Provides details about specific PN record
     * @param {string} recordId Pass the id of the particular PN record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApiInterface
     */
    getRecord(recordId: string, options?: AxiosRequestConfig): AxiosPromise<Record>;

    /**
     * Returns a list of all PN records stored in the system
     * @summary Provides list of all PN records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApiInterface
     */
    getRecordAll(options?: AxiosRequestConfig): AxiosPromise<Array<Record>>;

    /**
     * Use this method to update content of specific PN record.
     * @summary Updates fields of specific PN record
     * @param {string} recordId Pass the ID of the particular PN record
     * @param {Record} record Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApiInterface
     */
    updateRecord(recordId: string, record: Record, options?: AxiosRequestConfig): AxiosPromise<Record>;

}

/**
 * PnRegistryRecordsApi - object-oriented interface
 * @export
 * @class PnRegistryRecordsApi
 * @extends {BaseAPI}
 */
export class PnRegistryRecordsApi extends BaseAPI implements PnRegistryRecordsApiInterface {
    /**
     * Use this method to store newly issued PN record of pacient into list of all PN records in the system.
     * @summary Saves new PN record into list of all PN records
     * @param {Record} record New PN record to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApi
     */
    public createRecord(record: Record, options?: AxiosRequestConfig) {
        return PnRegistryRecordsApiFp(this.configuration).createRecord(record, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specific PN record (based on record ID) from list of all PN records in the system.
     * @summary Deletes specific PN record
     * @param {string} recordId pass the ID of the particular PN record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApi
     */
    public deleteRecord(recordId: string, options?: AxiosRequestConfig) {
        return PnRegistryRecordsApiFp(this.configuration).deleteRecord(recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Based on provided record ID you can get details of particular PN record.
     * @summary Provides details about specific PN record
     * @param {string} recordId Pass the id of the particular PN record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApi
     */
    public getRecord(recordId: string, options?: AxiosRequestConfig) {
        return PnRegistryRecordsApiFp(this.configuration).getRecord(recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all PN records stored in the system
     * @summary Provides list of all PN records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApi
     */
    public getRecordAll(options?: AxiosRequestConfig) {
        return PnRegistryRecordsApiFp(this.configuration).getRecordAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of specific PN record.
     * @summary Updates fields of specific PN record
     * @param {string} recordId Pass the ID of the particular PN record
     * @param {Record} record Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnRegistryRecordsApi
     */
    public updateRecord(recordId: string, record: Record, options?: AxiosRequestConfig) {
        return PnRegistryRecordsApiFp(this.configuration).updateRecord(recordId, record, options).then((request) => request(this.axios, this.basePath));
    }
}


