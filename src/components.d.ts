/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MbPnregistryApp {
        "apiBase": string;
        "basePath": string;
    }
    interface MbPnregistryDetail {
        "apiBase": string;
        "recordId": string;
    }
    interface MbPnregistryList {
        "apiBase": string;
    }
}
export interface MbPnregistryDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMbPnregistryDetailElement;
}
export interface MbPnregistryListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMbPnregistryListElement;
}
declare global {
    interface HTMLMbPnregistryAppElement extends Components.MbPnregistryApp, HTMLStencilElement {
    }
    var HTMLMbPnregistryAppElement: {
        prototype: HTMLMbPnregistryAppElement;
        new (): HTMLMbPnregistryAppElement;
    };
    interface HTMLMbPnregistryDetailElementEventMap {
        "detail-closed": string;
    }
    interface HTMLMbPnregistryDetailElement extends Components.MbPnregistryDetail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMbPnregistryDetailElementEventMap>(type: K, listener: (this: HTMLMbPnregistryDetailElement, ev: MbPnregistryDetailCustomEvent<HTMLMbPnregistryDetailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMbPnregistryDetailElementEventMap>(type: K, listener: (this: HTMLMbPnregistryDetailElement, ev: MbPnregistryDetailCustomEvent<HTMLMbPnregistryDetailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMbPnregistryDetailElement: {
        prototype: HTMLMbPnregistryDetailElement;
        new (): HTMLMbPnregistryDetailElement;
    };
    interface HTMLMbPnregistryListElementEventMap {
        "record-clicked": string;
    }
    interface HTMLMbPnregistryListElement extends Components.MbPnregistryList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMbPnregistryListElementEventMap>(type: K, listener: (this: HTMLMbPnregistryListElement, ev: MbPnregistryListCustomEvent<HTMLMbPnregistryListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMbPnregistryListElementEventMap>(type: K, listener: (this: HTMLMbPnregistryListElement, ev: MbPnregistryListCustomEvent<HTMLMbPnregistryListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMbPnregistryListElement: {
        prototype: HTMLMbPnregistryListElement;
        new (): HTMLMbPnregistryListElement;
    };
    interface HTMLElementTagNameMap {
        "mb-pnregistry-app": HTMLMbPnregistryAppElement;
        "mb-pnregistry-detail": HTMLMbPnregistryDetailElement;
        "mb-pnregistry-list": HTMLMbPnregistryListElement;
    }
}
declare namespace LocalJSX {
    interface MbPnregistryApp {
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface MbPnregistryDetail {
        "apiBase"?: string;
        "onDetail-closed"?: (event: MbPnregistryDetailCustomEvent<string>) => void;
        "recordId"?: string;
    }
    interface MbPnregistryList {
        "apiBase"?: string;
        "onRecord-clicked"?: (event: MbPnregistryListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "mb-pnregistry-app": MbPnregistryApp;
        "mb-pnregistry-detail": MbPnregistryDetail;
        "mb-pnregistry-list": MbPnregistryList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mb-pnregistry-app": LocalJSX.MbPnregistryApp & JSXBase.HTMLAttributes<HTMLMbPnregistryAppElement>;
            "mb-pnregistry-detail": LocalJSX.MbPnregistryDetail & JSXBase.HTMLAttributes<HTMLMbPnregistryDetailElement>;
            "mb-pnregistry-list": LocalJSX.MbPnregistryList & JSXBase.HTMLAttributes<HTMLMbPnregistryListElement>;
        }
    }
}
